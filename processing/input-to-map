#!/usr/bin/python

import psycopg2
import psycopg2.extras
import os
import json
import re
from Stemmer import Stemmer

from dateutil.parser import parse as parse_date

stemmer = Stemmer('english')
stop_words = [w.strip() for w in file("stop-words.txt").readlines()]

def stem(word):
    word = word.lower()
    for letter in "():;!?.,":
        word = word.replace(letter, "")
    return stemmer.stemWord(word)


def create_processed_tables(conn):
    print "*** Creating blank tables for output"
    cursor = conn.cursor()

    cursor.execute("DROP TABLE IF EXISTS person CASCADE")
    cursor.execute("CREATE TABLE person(id serial primary key, name text not null)")

    cursor.execute("DROP TABLE IF EXISTS word CASCADE")
    cursor.execute("CREATE TABLE word(id serial primary key, name text not null)")

    cursor.execute("DROP TABLE IF EXISTS person_word CASCADE")
    cursor.execute("CREATE TABLE person_word(person_id integer references person(id), date date, related_word_id integer references word(id), uses integer not null default 0)")

    cursor.execute("DROP TABLE IF EXISTS word_word CASCADE")
    cursor.execute("CREATE TABLE word_word(word_id integer references word(id), related_word_id integer references word(id), uses integer not null default 0)")

    cursor.execute("DROP TABLE IF EXISTS word_word_distance CASCADE")
    cursor.execute("CREATE TABLE word_word_distance(person_id integer references person(id), date date, word_id integer references word(id), related_word_id integer references word(id), dist integer not null default 0, uses integer not null default 0)")

def process(conn):
    print "*** Processing people"
    cursor = conn.cursor()
    cursor.execute("DELETE FROM person")
    cursor.execute("INSERT INTO person(id, name) (SELECT DISTINCT speakerid, max(speakername) FROM input GROUP BY speakerid)")

    word_idx = {}
    person_words = {}

    # speaker word distance stuff
    swpa = {}

    print "*** Processing events"
    cursor.execute("SELECT timestamp, speakerid, text FROM input")
    for counter, (timestamp, person_id, body) in enumerate(cursor):
        if counter % 100 == 0:
            print "processed %d events" % counter
        #print "%s %20s %s" % (time, name, body[:40])

        try:
            dtime = parse_date(timestamp)
        except:
            dtime = parse_date('%s 00:00:00' % timestamp.split(' ',2)[0])

        for sentence in body.split('.'):
            words = re.split('[^\w]+', sentence)
            for i, word in enumerate(words):
                # normalise
                word = word.lower()
                for letter in "();:!?.,":
                    word = word.replace(letter, "")
                # filter
                if word in stop_words or len(word) == 0:
                    continue
                # convert to ID
                if word not in word_idx:
                    word_idx[word] = len(word_idx)
                word_id = word_idx[word]
                # relate to person
                if person_id not in person_words:
                    person_words[person_id] = {}
                if word_id not in person_words[person_id]:
                    person_words[person_id][word_id] = 0
                person_words[person_id][word_id] = person_words[person_id][word_id] + 1

                if i < 1:
                  continue
                w_id = word_idx[word]
                lr = i-6 if i-6 > 0 else 0
                for ia in range (lr, i-1):
                    w2 = words[ia]
                    w2 = w2.lower()
                    if w2 in stop_words or len(w2) == 0:
                        continue
                    w2_id = word_idx[w2]
                    w_id, w2_id = sorted([w_id, w2_id])
                    key = (person_id, dtime.date(), w_id, w2_id, i-ia)
              
                    swpa[key] = swpa.get(key, 0) + 1
                
    cursor = conn.cursor()
    for word in word_idx:
        cursor.execute("INSERT INTO word (id, name) VALUES (%s, %s)", (word_idx[word], word))

    for person_id in person_words:
        print "Committing words for person %d" % person_id
        for word_id in person_words[person_id]:
            cursor.execute("INSERT INTO person_word (person_id, related_word_id, uses) VALUES (%s, %s, %s)", (person_id, word_id, person_words[person_id][word_id]))

    #commit_words(conn)
    dist_len = len(swpa)
    i = 0
    for k,v in swpa.iteritems():
        print 'Commtted word_distance %s / %s' % (i, dist_len)
        i += 1
        pid, dt, w1, w2, d = k
        cursor.execute("INSERT INTO word_word_distance (person_id, date, word_id, related_word_id, dist, uses) VALUES (%s, %s, %s, %s, %s, %s)", (pid, dt.isoformat(), w1, w2, d, v))

def create_indexes(conn):
    cursor = conn.cursor()
    #cursor.execute("CREATE INDEX stemmed_word on word(ts_lexize('english_stem', name))")
    cursor.execute("CREATE INDEX person_word__person ON person_word(person_id)")
    cursor.execute("CREATE INDEX person_word__word ON person_word(related_word_id)")

def print_results(conn):
    print "*** Results"
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM person")
    for person_id, person_name in cursor.fetchall():
        print "-", person_name
        cursor.execute("""
            SELECT related_word_id, name, uses
            FROM person_word JOIN word ON person_word.related_word_id = word.id
            WHERE person_id = %s
            ORDER BY uses DESC
            LIMIT 10
        """, (person_id, ))
        for word_id, word_name, uses in cursor.fetchall():
            print uses, word_name
            pass


def main():
    conn_string = "host='localhost' dbname='%(user)s' user='%(user)s' password='%(user)s'" % {'user': os.environ['USER']}
    conn = psycopg2.connect(conn_string)

    create_processed_tables(conn)
    process(conn)
    create_indexes(conn)
    print_results(conn)

    conn.commit()

if __name__ == "__main__":
    main()

